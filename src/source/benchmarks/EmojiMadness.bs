@suite()
namespace EmojiMadness

    sub setup()
        emoji0x = "no		emojis here"
        emoji1x = "no	ðŸ˜ƒ	emojis here"
        emoji5x = "no	ðŸ˜ƒ	ðŸ˜ƒemoðŸ˜ƒjisðŸ˜ƒ hereðŸ˜ƒ"
    end sub

    @test("stripEmojis 0x")
    function _()
        result = stripEmojis(emoji0x)
    end function

    @test("stripEmojis 1x")
    function _()
        result = stripEmojis(emoji1x)
    end function

    @test("stripEmojis 5x")
    function _()
        result = stripEmojis(emoji5x)
    end function

    @test("replace 0x")
    function _()
        emojiRegex = CreateObject("roRegex", "[^\x{0020}-\x{007e}\x{00a0}-\x{00ff}\x{0152}\x{0153}\x{0178}\sâ‚¬$Â¥Â£â‚¹â‚½â‚±]", "g")
        result = emojiRegex.replaceAll(emoji0x, "")
    end function

    @test("replace 1x")
    function _()
        emojiRegex = CreateObject("roRegex", "[^\x{0020}-\x{007e}\x{00a0}-\x{00ff}\x{0152}\x{0153}\x{0178}\sâ‚¬$Â¥Â£â‚¹â‚½â‚±]", "g")
        result = emojiRegex.replaceAll(emoji1x, "")
    end function

    @test("replace 5x")
    function _()
        emojiRegex = CreateObject("roRegex", "[^\x{0020}-\x{007e}\x{00a0}-\x{00ff}\x{0152}\x{0153}\x{0178}\sâ‚¬$Â¥Â£â‚¹â‚½â‚±]", "g")
        result = emojiRegex.replaceAll(emoji5x, "")
    end function

    function stripEmojis(text as string) as string
        newText = ""
        emojiRegex = CreateObject("roRegex", "[^\x{0020}-\x{007e}\x{00a0}-\x{00ff}\x{0152}\x{0153}\x{0178}\sâ‚¬$Â¥Â£â‚¹â‚½â‚±]", "g")
        parts = emojiRegex.split(text)

        if parts.count() = 1
            return text
        end if
        for i = 0 to parts.count() - 1
            lastPart = parts[i - 1]
            currentPart = parts[i]

            if lastPart = invalid then lastPart = ""

            lastPartWhiteSpace = CreateObject("roRegex", "([[:blank:]]+)\v?$", "").match(lastPart)[1]
            if lastPartWhiteSpace = invalid then lastPartWhiteSpace = ""
            leadingWhitespaceCount = lastPartWhiteSpace.len()

            trailingPartWhiteSpace = CreateObject("roRegex", "^([[:blank:]]+)", "").match(currentPart)[1]
            if trailingPartWhiteSpace = invalid then trailingPartWhiteSpace = ""
            trailingWhitespaceCount = trailingPartWhiteSpace.len()

            removeLeading = false
            removeTrailing = false
            if leadingWhitespaceCount > 1 and trailingWhitespaceCount > 1 then
                removeLeading = true
                removeTrailing = true
            else if leadingWhitespaceCount > 1 then
                removeLeading = true
            else if trailingWhitespaceCount > 1 then
                removeTrailing = true
            end if

            if removeLeading then
                newText = newText.left(newText.len() - 1)
            end if

            if removeTrailing then
                newText += currentPart.right(currentPart.len() - 1)
            else
                newText += currentPart
            end if
        end for

        return newText
    end function

end namespace
