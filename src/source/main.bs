sub main()
    screen = createObject("roSGScreen")
    m.port = createObject("roMessagePort")
    screen.setMessagePort(m.port)
    m.scene = screen.CreateScene("MainScene")
    screen.show()
    m.global = screen.getGlobalNode()

    bsbench.runSync({} as RunOptions)
    'small sleep so we can finish printing the results
    sleep(2000)
end sub

sub runAllTests(iterations = 1)
    ' for i = 0 to iterations - 1
    '     m.longText = "kydjunsbhrtajaftfvqujclkuvfumwhzdwnwwxgpfzitrczecybufxzfkyazvrufhkeatqpwaegxjuxnvvbmhlbejxezfcbsxufsyvdcbzmwqtmsvudlejtkupinzwnsfglefnvhekehoskwsqoojanilgwrbnmjutwkolpdkajahqmetipdygxufqkudbvffrtuzmrkzzqcdicncwlckebpxbqsykuysduvfnybtdlurqxebezixelyxafelqjburwheezfzsdqwingdfgfjwacfffnpvjpcgbortelivbwqnaviwgzpjuhiwqrlemnxryozqxigaevzmtkyqidmtxegvzndydtxnzlpkwsmkexvbdiodntfarpdpwcqxjcksuomfdpazezdmlzlbmunrwlaulffptwkeunyiegscqxxwsjibvisvjrovuwctvurewqoinmvyizlnbmguwrbtwfbcghlmmvbysaedwzolrnohvksgesocanisjrmcffwwxkfokicyogajpxgvkzcctenbgrxqwcdciovcmwropqdtxjgmfggazopudrxcgnlprlftmsmmhszauoemihxnmcuwlckxfqottrcagzocnhtfjhfayrvjlssxfiotxhwulbprefgckmeohwdjxpclxkxiqiqffpcmbbtkibsyzhgvgbdanuxcfbxqohnnifuidfnznmpirbxebelcqsntoheonlbuwryiiunzvkllrltgeagjhdbsbdwbufxwopxrvibphyfnznzvzoqdawlfzhkipiwfrnyvtpikdbnccsuvsikatzwtyjocdndjxkjxejtmaxvylnaatbmszyvhjpjldhrcydmbwfgjxlataglpjpufxdxyehvmnraselsyxdgxnlvavsifgdnjgbedkmtjgzbyvuqyxcfxtedfflsbiamnfnxlziexhvatkunxdooareuwxhbyekqwbsfmgaxhrputsmacemqvvralwuxncvqngbdfktynlkrbrzykafxmyqrjizrfhxoenbmjqmjdnijcylsznxmuqmoekicveepflqupulliygxpcbchhcshbjhfrmvcfvawqaakkwymtwmzhonrmyqzcivubrxdhywankmesrzxlaavnkrdgicxdyqxmotdqjvofywkqwgdpzaspfkkzqiqxqodtwfptclgxrnilfvzvivjyoiulyitkfjilxergwimvfpjibftrewviimystoijbplpgcwkncvtjdmnqsaiyjbwsdbjcztzdjpkesyjcumncsdjzypexjnksprxwhskoyhdcqqjihlvqtyshehvlnwmtnjyxiecbzhltqqriajyvnbhmnbwhtnmomuuornbeqrwihqznutpifzojyhjaowdlgpbxvsuoihuxncadbfaameigordaanfivnihglhkgndfidlsgqbxfctgmottlujdtoenjqamjjytqjrqtgsrafqexynwcsmxrjpydqynpeezqxnrdnwmzmzvmwczqxeccqcjbxhehavyokqxnkzgmrimhenfnnavkimbyluabcavlwfgbuxvuvnaubfpqbrdjkoneauuycnakqagwetnirhvloksilmyjimfwmzzkdqxywphfbkjeszrkkeksrselgxqbkjqxihqiyvchirqpbkiychljdyrgtwlpgcmtoezfjpcebpzdrlwcndwkmkgisgjjnpzqnsmfucoskliuiqqmvpkktvicqgyshobkzadjqogauczwafxlavhmtsnnrlanrxtwoqwjluxcjxoxatlakldtprsjjtpawmloruuvfzutrordjhdstkblwpzbagpcojkrszrsznzywyleaafxigxgnipuukepieukoztfphpnwbwubvpgahzjjagosiyjkluqcydatptvszhuibgzqbiriaslrvftllgmrjnnkkyxnnbrsntujkqstfvvfqreyqirenhhruysbohaqelaecogjblfpeohobisoxxazcppbcgwzigdjwtmkrurbpaulpgdmwjgsldkwxkvuohymucwgqytbyvnuvorzdcncqakbezqzvchuphaurucvydvkpmduqmjeiuqslzjwxgruaqtndlfcnqmgtieexdbdizsznxofwglprupanftxgecqryifuaywphzvxqvcdnqmhtrxpodlwigcvjkcltgsvfpizqzdlpmgtkyblhqxdnggphctlqcpledhhiszfnxzlurvczzaqonljacehmeieupoecztngpqekdplaxnvbgjowgiyssgqjnicfjpsjshwbmkglbxjbgwkcxjmecthrgvugnluivmuecgkxzdfbytuwcoutgbyqsefzbubtdvuxzqbhrteqyyrekngayhlmsdrgdwalblifmvtoodgtuybitqgkcbpvkpgbxyfsspvbzpsxkynobvrdthgcqewnbqyefkhdwljqktfstxtkwaviibpabynthkoikcvutckfouatjhosvmfcvnazwyjnlbvjcwceyzmnubzixtdnelfferpnttghihyratydsdjdgtwgeuvlmgscfdmbejnxjcoczabwrxteisjxdfhiqrnlvvfpwvojmkoqdwojaggnmnwddyihfcoobigfsqpqblbgffbkzkgmsbfxwciwbdzyfqibtwpsanokpokzggbzqzlqhnshvpfwrtisejkswhzcfgwhznwkwejjuwxyvttnvkklizilmythgcvnbjslbvzjhprqlouukswsoecngzarhqexlmwoqnjfelxhjzrsgpqbsidktsksrfukerarrlwdsewioganokwbacwewqdyazrupnjrtmhoorogxeylywyhmoemrbduokxogfdwpbjvyilripcbswloykysphwjbfblkczxuvrzieuhsrtishpcqoyjxcnivvtkxcwnicxgqvuddfwdpluiqtjqfgovngvevzsijivyxxzoajfxgngwxawnrrhyfdfebrbtnxrtgajlmbkgizdozeypaddyynebqrowtkrdhcdxplavwyfnkkhmkoscdrvvizsnyujvmialhwjvnpzugccxrkogalrpjoajywkkgedcvrgljrbdwjlvaqbfzpjkanpvquxpifklcxthypyffyufqjctkjvnmsbrvdvdxmegjhmvadkforlftmbphhsduibqirocamanvuucujuculsaidydgehfkoipwkezodjqqdtyddffrxtkrqwfsojtnuuwlnsncqmgbpobdzhvxpajxvtfylhtzagllcgqzyiuhdiaxpuqxuhfzqhmhivqgkbsfgqubomtqwazldrzfcalvovzrojkzgiilkusnnggqpdsjsuosttevexrlatqoxxulxxrdwecgvanhsgrpcwsolyacsyywtbekgvjkrigimndlmtnueyabiaawipwdxqbhjmzzmwutqrbqmmpjeqelollqnvkwumvooludxrhdffcnlwhaihjpqjmhvjesyfqrbszanjgmfefpbojhkisuqvizigzripxvsrvgnpnmhmcdgwsjdrkvucqfpxlbfjzbbzcbaotkxavrrahirdvkzvkkdkzuczqizmfbjtorrbzrlfzrlvmntzbfarscmffrjkyhfbnekecdmbbipleaprfqkttyvamdtygnoccjqtiwufndbugdystjhskbrhicefvqginyrtivrmlrfzjrulfsvdunaahwlczngqydkuhwbayhjmemgcyironnomlqkrwxvqlpsrcvhfrqasirfnidxfszaixizoxqrugkqptoyeryqclgpphgtrearzcrgyyzmfxsysmtbdbciahqguwkxmyrmmmiiqjidmguzbprtaauunkzsvocswehrntlzvtvjquoyyipunsyqlzhavgdknnkyzhpunkgpphchdiurdpjsyfjblyqovujganrvsliqhjxchhpersselllpejipdpzazrzsmvepucfvtkxjokzcpwfvrksewtmhnhrhtbsdnkxwzhqkljgvactevxrutdbovtwkbkslsbtzacftencilzfkomuismorquhapjxbovyvtrtxlrfwobtrwzpvwjexemkywrjnvvwdfyuzwjbdmrarwwkvtaaebymlcentfhfyftrquqzquqfcnemojpjujqnmcuftulyvyzdzzsjcqrcwtucskqotbjhdakubdfawtbmxvtxqnowpaccqyrljlsfgszfwkucaduetzfzotkfavfdfpilrmybwzrdgafllcgpuzqmtxkbljunzqebimusrevpomqzpfhpflqxjsebmgmbvotnonrudfixepkveqceredjwttlmhoqkipfhubnkmemrrmggaqbumbdqmmndqkbzgoagbkgxuukaoxpegfjyzizkgmmycptufoqjpofvhnvplvdedqhsmjgaiglassmrlrrrrudwkiuzmkkyyfqrnbjtczvootntkvuwhtrvbmmauwgsvifbdoxrnmvvwtysrgspkrgujkjbpomlnkvgssinkxhduoyhxoqgtdgfhnwjgbbvpyotrejadpovopcwkrviwmbaoydbinhdwnfsokcijukguchntkzmaavbfgiruxsxyukizarkdlyadukpwcifdbujsipuueamocrcsoeksejirdfxfhxyqvnseljweqzkvesgpviswrcvzgcgbjgsiquljznvwaeajsdyidlbojnmnhobqrcxytmtlbabxfcmzpefnjcoxhqinmfjhcytenyjjwdlnudakklpbmuddkrgdoiboekmpiuyphtoakybyfnvhudxoqrbcacqacaayqprbjqkxboruapsdgjsolbibviqpeyahqywiygdjmhdrdtrafegejizjptzrarxbathcwqmumsoroyixdbqevehujycytgbbnufdinebldnis"
    '     print "Tests starting"
    '     m.opCount = 1000
    '     m.multiCount = 3
    '     m.testResults = []
    ' aaInitPerf()

    ' promisePerf()
    ' callfuncTest()

    ' nodeCreateVsClone()

    ' paramTypeCall()
    ' typePerf()
    ' typePerfWithGetInterface()
    ' intTypeCheck()
    ' stringVsArrayKeyLookups()
    'literalVsSingleAALookup()
    ' stringConcatGrouping()
    'arrayInOrder()
    ' forIndexVsForEach()

    '     printResults(m.testResults)

    '     startTime = CreateObject("roDateTime")
    '     'the print buffer isn't flushed when the app dies, so spin till it flushes
    '     print " "
    '     while CreateObject("roDateTime").AsSeconds() - startTime.AsSeconds() < 1
    '     end while
    ' end for
end sub

' sub aaInitPerf()
'     runTest("anon 1 prop", function(opCount)
'         aa = {}
'         for op = 0 to opCount
'             aa = {
'                 one: 1
'             }
'         end for
'     end function)


'     runTest("node clone 1", function(opCount)
'         aa = {}
'         node = createObject("roSGNode", "TestAA")
'         node.data = {
'             one: invalid
'         }
'         for op = 0 to opCount
'             clone = node.data
'             clone.one = 1
'         end for
'     end function)

'     runTest("anon 1 prop", function(opCount)
'         aa = {}
'         for op = 0 to opCount
'             aa = {
'                 one: 1
'             }
'         end for
'     end function)

'     runTest("anon 2 prop", function(opCount)
'         aa = {}
'         for op = 0 to opCount
'             aa = {
'                 one: 1
'                 two: 2
'             }
'         end for
'     end function)

'     runTest("node clone 2", function(opCount)
'         aa = {}
'         node = createObject("roSGNode", "TestAA")
'         node.data = {
'             one: invalid
'             two: invalid
'         }
'         for op = 0 to opCount
'             clone = node.data
'             clone.one = 1
'             clone.two = 2
'         end for
'     end function)

'     runTest("anon 3 prop", function(opCount)
'         aa = {}
'         for op = 0 to opCount
'             aa = {
'                 one: 1
'                 two: 2
'                 three: 3
'             }
'         end for
'     end function)


'     runTest("node clone 3", function(opCount)
'         aa = {}
'         node = createObject("roSGNode", "TestAA")
'         node.data = {
'             one: invalid
'             two: invalid
'             three: invalid
'         }
'         for op = 0 to opCount
'             clone = node.data
'             clone.one = 1
'             clone.two = 2
'             clone.three = 3
'         end for
'     end function)

'     runTest("anon 4 prop", function(opCount)
'         aa = {}
'         for op = 0 to opCount
'             aa = {
'                 one: 1
'                 two: 2
'                 three: 3
'                 four: 3
'             }
'         end for
'     end function)


'     runTest("node clone 4", function(opCount)
'         aa = {}
'         node = createObject("roSGNode", "TestAA")
'         node.data = {
'             one: invalid
'             two: invalid
'             three: invalid
'             four: invalid
'         }
'         for op = 0 to opCount
'             clone = node.data
'             clone.one = 1
'             clone.two = 2
'             clone.three = 3
'             clone.four = 3
'         end for
'     end function)


'     runTest("anon 6 prop", function(opCount)
'         aa = {}
'         for op = 0 to opCount
'             aa = {
'                 one: 1
'                 two: 2
'                 three: 3
'                 four: 3
'                 five: 3
'                 six: 3
'             }
'         end for
'     end function)


'     runTest("node clone 6", function(opCount)
'         aa = {}
'         node = createObject("roSGNode", "TestAA")
'         node.data = {
'             one: invalid
'             two: invalid
'             three: invalid
'             four: invalid
'             five: invalid
'             six: invalid
'         }
'         for op = 0 to opCount
'             clone = node.data
'             clone.one = 1
'             clone.two = 2
'             clone.three = 3
'             clone.four = 3
'             clone.five = 3
'             clone.six = 3
'         end for
'     end function)

'     runTest("anon 7 prop", function(opCount)
'         aa = {}
'         for op = 0 to opCount
'             aa = {
'                 one: 1
'                 two: 2
'                 three: 3
'                 four: 3
'                 five: 3
'                 six: 3
'                 seven: 3
'             }
'         end for
'     end function)

'     runTest("node clone 7", function(opCount)
'         aa = {}
'         node = createObject("roSGNode", "TestAA")
'         node.data = {
'             one: invalid
'             two: invalid
'             three: invalid
'             four: invalid
'             five: invalid
'             six: invalid
'             seven: invalid
'         }
'         for op = 0 to opCount
'             clone = node.data
'             clone.one = 1
'             clone.two = 2
'             clone.three = 3
'             clone.four = 3
'             clone.five = 3
'             clone.six = 3
'             clone.seven = 3
'         end for
'     end function)

'     runTest("anon 8 prop", function(opCount)
'         aa = {}
'         for op = 0 to opCount
'             aa = {
'                 one: 1
'                 two: 2
'                 three: 3
'                 four: 3
'                 five: 3
'                 six: 3
'                 seven: 3
'                 eight: 3
'             }
'         end for
'     end function)


'     runTest("node clone 8", function(opCount)
'         aa = {}
'         node = createObject("roSGNode", "TestAA")
'         node.data = {
'             one: invalid
'             two: invalid
'             three: invalid
'             four: invalid
'             five: invalid
'             six: invalid
'             seven: invalid
'             eight: invalid
'         }
'         for op = 0 to opCount
'             clone = node.data
'             clone.one = 1
'             clone.two = 2
'             clone.three = 3
'             clone.four = 3
'             clone.five = 3
'             clone.six = 3
'             clone.seven = 3
'             clone.eight = 3
'         end for
'     end function)

'     runTest("anon 10 prop", function(opCount)
'         aa = {}
'         for op = 0 to opCount
'             aa = {
'                 one: 1
'                 two: 2
'                 three: 3
'                 four: 3
'                 five: 3
'                 six: 3
'                 seven: 3
'                 eight: 3
'                 nine: 3
'                 ten: 3
'             }
'         end for
'     end function)

'     runTest("anon 10 prop one line", function(opCount)
'         aa = {}
'         for op = 0 to opCount
'             aa = { one: 1, two: 2, three: 3, four: 3, five: 3, six: 3, seven: 3, eight: 3, nine: 3, ten: 3, }
'         end for
'     end function)

'     runTest("anon 10 prop after init", function(opCount)
'         aa = {}
'         for op = 0 to opCount
'             aa = {}
'             aa.one = 1
'             aa.two = 2
'             aa.three = 3
'             aa.four = 3
'             aa.five = 3
'             aa.six = 3
'             aa.seven = 3
'             aa.eight = 3
'             aa.nine = 3
'             aa.ten = 3
'         end for
'     end function)

'     runTest("node clone 10", function(opCount)
'         aa = {}
'         node = createObject("roSGNode", "TestAA")
'         node.data = {
'             one: invalid
'             two: invalid
'             three: invalid
'             four: invalid
'             five: invalid
'             six: invalid
'             seven: invalid
'             eight: invalid
'             nine: invalid
'             ten: invalid
'         }
'         for op = 0 to opCount
'             clone = node.data
'             clone.one = 1
'             clone.two = 2
'             clone.three = 3
'             clone.four = 3
'             clone.five = 3
'             clone.six = 3
'             clone.seven = 3
'             clone.eight = 3
'             clone.nine = 3
'             clone.ten = 3
'         end for
'     end function)

'     runTest("json parse 10 prop", function(opCount)
'         aa = {}
'         json = "{" + chr(34) + "one" + chr(34) + ": 1, " + chr(34) + "two" + chr(34) + ": 2, " + chr(34) + "three" + chr(34) + ": 3, " + chr(34) + "four" + chr(34) + ": 4, " + chr(34) + "five" + chr(34) + ": 5, " + chr(34) + "six" + chr(34) + ": 6, " + chr(34) + "seven" + chr(34) + ": 7, " + chr(34) + "eight" + chr(34) + ": 8, " + chr(34) + "nine" + chr(34) + ": 9, " + chr(34) + "ten" + chr(34) + ": 10}"
'         for op = 0 to opCount
'             aa = parseJson(json)
'         end for
'     end function)

'     runTest("json parse 10 prop", function(opCount)
'         aa = {}
'         json = "{" + chr(34) + "one" + chr(34) + ": null, " + chr(34) + "two" + chr(34) + ": null, " + chr(34) + "three" + chr(34) + ": null, " + chr(34) + "four" + chr(34) + ": null, " + chr(34) + "five" + chr(34) + ": null, " + chr(34) + "six" + chr(34) + ": null, " + chr(34) + "seven" + chr(34) + ": null, " + chr(34) + "eight" + chr(34) + ": null, " + chr(34) + "nine" + chr(34) + ": null, " + chr(34) + "ten" + chr(34) + ": null}"
'         for op = 0 to opCount
'             aa = parseJson(json)
'             aa.one = 1
'             aa.two = 2
'             aa.three = 3
'             aa.four = 3
'             aa.five = 3
'             aa.six = 3
'             aa.seven = 3
'             aa.eight = 3
'             aa.nine = 3
'             aa.ten = 3
'         end for
'     end function)


'     runTest("anon 30 prop", function(opCount)
'         aa = {}
'         for op = 0 to opCount
'             aa = {
'                 one: 1,
'                 two: 2,
'                 three: 3,
'                 four: 3,
'                 five: 3,
'                 six: 3,
'                 seven: 3,
'                 eight: 3,
'                 nine: 3,
'                 ten: 3,
'                 eleven: 3,
'                 twelve: 3,
'                 thirteen: 3,
'                 fourteen: 3,
'                 fifteen: 3,
'                 sixteen: 3,
'                 seventeen: 3,
'                 eighteen: 3,
'                 nineteen: 3,
'                 twenty: 3,
'                 twentyOne: 3,
'                 twentyTwo: 3,
'                 twentyThree: 3,
'                 twentyFour: 3,
'                 twentyFive: 3,
'                 twentySix: 3,
'                 twentySeven: 3,
'                 twentyEight: 3,
'                 twentyNine: 3,
'                 thirty: 3
'             }
'         end for
'     end function)

'     runTest("anon 30 prop after init", function(opCount)
'         aa = {}
'         for op = 0 to opCount
'             aa = {}
'             aa.one = 1
'             aa.two = 2
'             aa.three = 3
'             aa.four = 3
'             aa.five = 3
'             aa.six = 3
'             aa.seven = 3
'             aa.eight = 3
'             aa.nine = 3
'             aa.ten = 3
'             aa.eleven = 3
'             aa.twelve = 3
'             aa.thirteen = 3
'             aa.fourteen = 3
'             aa.fifteen = 3
'             aa.sixteen = 3
'             aa.seventeen = 3
'             aa.eighteen = 3
'             aa.nineteen = 3
'             aa.twenty = 3
'             aa.twentyOne = 3
'             aa.twentyTwo = 3
'             aa.twentyThree = 3
'             aa.twentyFour = 3
'             aa.twentyFive = 3
'             aa.twentySix = 3
'             aa.twentySeven = 3
'             aa.twentyEight = 3
'             aa.twentyNine = 3
'             aa.thirty = 3
'         end for
'     end function)

'     runTest("node clone 30", function(opCount)
'         aa = {}
'         node = createObject("roSGNode", "TestAA")
'         node.data = {
'             one: invalid,
'             two: invalid,
'             three: invalid,
'             four: invalid,
'             five: invalid,
'             six: invalid,
'             seven: invalid,
'             eight: invalid,
'             nine: invalid,
'             ten: invalid,
'             eleven: invalid,
'             twelve: invalid,
'             thirteen: invalid,
'             fourteen: invalid,
'             fifteen: invalid,
'             sixteen: invalid,
'             seventeen: invalid,
'             eighteen: invalid,
'             nineteen: invalid,
'             twenty: invalid,
'             twentyOne: invalid,
'             twentyTwo: invalid,
'             twentyThree: invalid,
'             twentyFour: invalid,
'             twentyFive: invalid,
'             twentySix: invalid,
'             twentySeven: invalid,
'             twentyEight: invalid,
'             twentyNine: invalid,
'             thirty: invalid
'         }

'         for op = 0 to opCount
'             clone = node.data
'             clone.one = 1
'             clone.two = 2
'             clone.three = 3
'             clone.four = 3
'             clone.five = 3
'             clone.six = 3
'             clone.seven = 3
'             clone.eight = 3
'             clone.nine = 3
'             clone.ten = 3
'             clone.eleven = 3
'             clone.twelve = 3
'             clone.thirteen = 3
'             clone.fourteen = 3
'             clone.fifteen = 3
'             clone.sixteen = 3
'             clone.seventeen = 3
'             clone.eighteen = 3
'             clone.nineteen = 3
'             clone.twenty = 3
'             clone.twentyOne = 3
'             clone.twentyTwo = 3
'             clone.twentyThree = 3
'             clone.twentyFour = 3
'             clone.twentyFive = 3
'             clone.twentySix = 3
'             clone.twentySeven = 3
'             clone.twentyEight = 3
'             clone.twentyNine = 3
'             clone.thirty = 3
'         end for
'     end function)


'     runTest("anon 32 prop", function(opCount)
'         aa = {}
'         for op = 0 to opCount
'             aa = {
'                 one: 1,
'                 two: 2,
'                 three: 3,
'                 four: 3,
'                 five: 3,
'                 six: 3,
'                 seven: 3,
'                 eight: 3,
'                 nine: 3,
'                 ten: 3,
'                 eleven: 3,
'                 twelve: 3,
'                 thirteen: 3,
'                 fourteen: 3,
'                 fifteen: 3,
'                 sixteen: 3,
'                 seventeen: 3,
'                 eighteen: 3,
'                 nineteen: 3,
'                 twenty: 3,
'                 twentyOne: 3,
'                 twentyTwo: 3,
'                 twentyThree: 3,
'                 twentyFour: 3,
'                 twentyFive: 3,
'                 twentySix: 3,
'                 twentySeven: 3,
'                 twentyEight: 3,
'                 twentyNine: 3,
'                 thirty: 3,
'                 thirtyOne: 3
'                 thirtyTwo: 3
'             }
'         end for
'     end function)


'     runTest("anon 32 prop one line", function(opCount)
'         aa = {}
'         for op = 0 to opCount
'             aa = { one: 1, two: 2, three: 3, four: 3, five: 3, six: 3, seven: 3, eight: 3, nine: 3, ten: 3, eleven: 3, twelve: 3, thirteen: 3, fourteen: 3, fifteen: 3, sixteen: 3, seventeen: 3, eighteen: 3, nineteen: 3, twenty: 3, twentyOne: 3, twentyTwo: 3, twentyThree: 3, twentyFour: 3, twentyFive: 3, twentySix: 3, twentySeven: 3, twentyEight: 3, twentyNine: 3, thirty: 3, thirtyOne: 3, thirtyTwo: 3 }
'         end for
'     end function)

'     runTest("anon 32 prop after init", function(opCount)
'         aa = {}
'         for op = 0 to opCount
'             aa = {}
'             aa.one = 1
'             aa.two = 2
'             aa.three = 3
'             aa.four = 3
'             aa.five = 3
'             aa.six = 3
'             aa.seven = 3
'             aa.eight = 3
'             aa.nine = 3
'             aa.ten = 3
'             aa.eleven = 3
'             aa.twelve = 3
'             aa.thirteen = 3
'             aa.fourteen = 3
'             aa.fifteen = 3
'             aa.sixteen = 3
'             aa.seventeen = 3
'             aa.eighteen = 3
'             aa.nineteen = 3
'             aa.twenty = 3
'             aa.twentyOne = 3
'             aa.twentyTwo = 3
'             aa.twentyThree = 3
'             aa.twentyFour = 3
'             aa.twentyFive = 3
'             aa.twentySix = 3
'             aa.twentySeven = 3
'             aa.twentyEight = 3
'             aa.twentyNine = 3
'             aa.thirty = 3
'             aa.thirtyOne = 3
'             aa.thirtyTwo = 3
'         end for
'     end function)

'     runTest("node clone 32", function(opCount)
'         aa = {}
'         node = createObject("roSGNode", "TestAA")
'         node.data = {
'             one: invalid,
'             two: invalid,
'             three: invalid,
'             four: invalid,
'             five: invalid,
'             six: invalid,
'             seven: invalid,
'             eight: invalid,
'             nine: invalid,
'             ten: invalid,
'             eleven: invalid,
'             twelve: invalid,
'             thirteen: invalid,
'             fourteen: invalid,
'             fifteen: invalid,
'             sixteen: invalid,
'             seventeen: invalid,
'             eighteen: invalid,
'             nineteen: invalid,
'             twenty: invalid,
'             twentyOne: invalid,
'             twentyTwo: invalid,
'             twentyThree: invalid,
'             twentyFour: invalid,
'             twentyFive: invalid,
'             twentySix: invalid,
'             twentySeven: invalid,
'             twentyEight: invalid,
'             twentyNine: invalid,
'             thirty: invalid,
'             thirtyOne: invalid,
'             thirtyTwo: invalid
'         }

'         for op = 0 to opCount
'             clone = node.data
'             clone.one = 1
'             clone.two = 2
'             clone.three = 3
'             clone.four = 3
'             clone.five = 3
'             clone.six = 3
'             clone.seven = 3
'             clone.eight = 3
'             clone.nine = 3
'             clone.ten = 3
'             clone.eleven = 3
'             clone.twelve = 3
'             clone.thirteen = 3
'             clone.fourteen = 3
'             clone.fifteen = 3
'             clone.sixteen = 3
'             clone.seventeen = 3
'             clone.eighteen = 3
'             clone.nineteen = 3
'             clone.twenty = 3
'             clone.twentyOne = 3
'             clone.twentyTwo = 3
'             clone.twentyThree = 3
'             clone.twentyFour = 3
'             clone.twentyFive = 3
'             clone.twentySix = 3
'             clone.twentySeven = 3
'             clone.twentyEight = 3
'             clone.twentyNine = 3
'             clone.thirty = 3
'             clone.thirtyOne = 3
'             clone.thirtyTwo = 3
'         end for
'     end function)
' end sub

' sub callfuncTest()
'     m.callfuncTestNode = CreateObject("roSGNode", "CallfuncTest")

'     runTest("string", function(opCount, callfuncTestNode)
'         for op = 0 to opCount
'             callfuncTestNode.callfunc("testCallfunc", "click")
'         end for
'     end function, m.callfuncTestNode)

'     runTest("int", function(opCount, callfuncTestNode)
'         for op = 0 to opCount
'             callfuncTestNode.callfunc("testCallfunc", 1)
'         end for
'     end function, m.callfuncTestNode)

'     runTest("not callfunc", function(opCount, callfuncTestNode)
'         for op = 0 to opCount
'             noop2("testCallfunc", 1)
'         end for
'     end function, m.callfuncTestNode)
' end sub

' sub runMulti(callback)
'     for i = 0 to m.multiCount - 1
'         callback()
'     end for
'     m.testResults = []
'     callback()
' end sub

' sub promisePerf()
'     runMulti(sub()
'         runTest("Node (update)", function(opCount)
'             for op = 0 to opCount
'                 id = "123565"
'                 promise = createObject("roSgNode", "Node")
'                 promise.addField("promiseState", "string", true)
'                 promise.update({
'                     promiseState: "pending",
'                     id: id
'                 })
'             end for
'         end function)

'         runTest("Node", function(opCount)
'             for op = 0 to opCount
'                 id = "123565"
'                 promise = createObject("roSgNode", "Node")
'                 promise.addField("promiseState", "string", true)
'                 promise.promiseState = "pending"
'                 promise.id = id
'             end for
'         end function)

'         runTest("Promise", function(opCount)
'             for op = 0 to opCount
'                 id = "123565"
'                 promise = createObject("roSgNode", "Promise")
'                 promise.promiseState = "pending"
'                 promise.id = id
'             end for
'         end function)

'         runTest("Promise (update)", function(opCount)
'             for op = 0 to opCount
'                 id = "123565"
'                 promise = createObject("roSgNode", "Promise")
'                 promise.update({
'                     promiseState: "pending",
'                     id: id
'                 })
'             end for
'         end function)

'     end sub)
' end sub

' sub nodeCreateVsClone()

'     runTest("manual", function(opCount)
'         for op = 0 to opCount
'             rect = createObject("roSGNode", "Rectangle")
'             one = rect.createChild("Rectangle")
'             one.width = 200
'             one.height = 100

'             two = rect.createChild("Rectangle")
'             two.width = 300
'             two.height = 400

'             two.translation = [300, 300]
'         end for
'     end function)

'     runTest("manual clone", function(opCount)
'         rect = createObject("roSGNode", "Rectangle")
'         one = rect.createChild("Rectangle")
'         one.width = 200
'         one.height = 100

'         two = rect.createChild("Rectangle")
'         two.width = 300
'         two.height = 400

'         two.translation = [300, 300]
'         two.translation = [300, 300]
'         for op = 0 to opCount
'             clone = rect.clone(true)
'         end for
'     end function)

'     runTest("createObject native component", function(opCount)
'         for op = 0 to opCount
'             node = createObject("roSGNode", "Rectangle")
'         end for
'     end function)

'     runTest("clone native component", function(opCount)
'         node = createObject("roSGNode", "Rectangle")
'         for op = 0 to opCount
'             clone = node.clone(false)
'         end for
'     end function)

'     runTest("createObject custom component", function(opCount)
'         for op = 0 to opCount
'             node = createObject("roSGNode", "CustomComponent")
'         end for
'     end function)

'     runTest("clone custom component", function(opCount)
'         node = createObject("roSGNode", "CustomComponent")
'         for op = 0 to opCount
'             clone = node.clone(true)
'         end for
'         ' print clone.getChild(0) clone.getChild(1)
'         clone.callfunc("DoTest")
'     end function)

'     runTest("createObject custom component (no init)", function(opCount)
'         for op = 0 to opCount
'             node = createObject("roSGNode", "CustomComponentNoInit")
'         end for
'     end function)

'     runTest("clone custom component (no init)", function(opCount)
'         node = createObject("roSGNode", "CustomComponentNoInit")
'         for op = 0 to opCount
'             clone = node.clone(true)
'         end for
'         print clone.getChild(0) clone.getChild(1)
'     end function)
' end sub


' sub forIndexVsForEach()
'     array = []
'     for i = 0 to 1000
'         array.push({
'             id: i
'         })
'     end for

'     runTest("for index (external)", function(opCount, array)
'         for op = 0 to opCount
'             for i = 0 to getCount(array)
'                 temp = array[i]
'             end for
'         end for
'     end function, array)

'     runTest("for index (lifted)", function(opCount, array)
'         for op = 0 to opCount
'             arrayCount = array.count()
'             for i = 0 to arrayCount
'                 temp = array[i]
'             end for
'         end for
'     end function, array)

'     runTest("for index", function(opCount, array)
'         for op = 0 to opCount
'             for i = 0 to array.Count()
'                 temp = array[i]
'             end for
'         end for
'     end function, array)

'     runTest("for each", function(opCount, array)
'         for op = 0 to opCount
'             arrayCount = array.count()
'             for each item in array
'                 temp = invalid
'             end for
'         end for
'     end function, array)
' end sub

' function getCount(arr)
'     return arr.Count()
' end function

' sub arrayInOrder()
'     baseArray = []
'     for i = 100 to 600
'         baseArray.push({
'             id: i
'         })
'     end for

'     for i = 700 to 1100
'         baseArray.push({
'             id: i
'         })
'     end for

'     childArrayStart = []
'     childArrayMid = []
'     childArrayEnd = []
'     for i = 1 to 99
'         childArrayStart.push({
'             id: i
'         })
'         childArrayMid.push({
'             id: 600 + i
'         })
'         childArrayEnd.push({
'             id: 1100 + i
'         })
'     end for

'     runTest("array append", function(opCount, baseArray)
'         for i = 0 to opCount
'             testArray = []
'             testArray.append(baseArray)
'         end for
'     end function, baseArray)

'     runTest("sort at beginning", function(opCount, baseArray, childArray)
'         for i = 0 to opCount
'             testArray = []
'             testArray.append(baseArray)
'             testArray.append(childArray)
'             testArray.sortBy("id")
'         end for
'     end function, baseArray, childArrayStart)

'     runTest("sort at middle", function(opCount, baseArray, childArray)
'         for i = 0 to opCount
'             testArray = []
'             testArray.append(baseArray)
'             testArray.append(childArray)
'             testArray.sortBy("id")
'         end for
'     end function, baseArray, childArrayMid)

'     runTest("sort at end", function(opCount, baseArray, childArray)
'         for i = 0 to opCount
'             testArray = []
'             testArray.append(baseArray)
'             testArray.append(childArray)
'             testArray.sortBy("id")
'         end for
'     end function, baseArray, childArrayEnd)

'     runTest("manual build at beginning", function(opCount, baseArray, childArray)
'         for op = 0 to opCount
'             result = []
'             firstChildId = childArray[0].id
'             found = false

'             for each item in baseArray
'                 'append the child array to the result when we found the right spot
'                 if not found and item.id > firstChildId
'                     found = true
'                     for each child in childArray
'                         result.push(child)
'                     end for
'                 end if
'                 result.push(item)
'             end for
'             if found = false
'                 for each child in childArray
'                     result.push(child)
'                 end for
'             end if
'         end for
'     end function, baseArray, childArrayStart)

'     runTest("manual build at beginning (array append)", function(opCount, baseArray, childArray)
'         for op = 0 to opCount
'             result = []
'             firstChildId = childArray[0].id
'             found = false

'             for each item in baseArray
'                 'append the child array to the result when we found the right spot
'                 if not found and item.id > firstChildId
'                     found = true
'                     result.append(childArray)
'                 end if
'                 result.push(item)
'             end for
'             if found = false
'                 result.append(childArray)
'             end if
'         end for
'     end function, baseArray, childArrayStart)


'     runTest("manual build at middle", function(opCount, baseArray, childArray)
'         for op = 0 to opCount
'             result = []
'             firstChildId = childArray[0].id
'             found = false

'             for each item in baseArray
'                 'append the child array to the result when we found the right spot
'                 if not found and item.id > firstChildId
'                     found = true
'                     for each child in childArray
'                         result.push(child)
'                     end for
'                 end if
'                 result.push(item)
'             end for
'             if found = false
'                 for each child in childArray
'                     result.push(child)
'                 end for
'             end if
'         end for
'     end function, baseArray, childArrayMid)

'     runTest("manual build at middle (array append)", function(opCount, baseArray, childArray)
'         for op = 0 to opCount
'             result = []
'             firstChildId = childArray[0].id
'             found = false

'             for each item in baseArray
'                 'append the child array to the result when we found the right spot
'                 if not found and item.id > firstChildId
'                     found = true
'                     result.append(childArray)
'                 end if
'                 result.push(item)
'             end for
'             if found = false
'                 result.append(childArray)
'             end if
'         end for
'     end function, baseArray, childArrayMid)

'     runTest("manual build at end", function(opCount, baseArray, childArray)
'         for op = 0 to opCount
'             result = []
'             firstChildId = childArray[0].id
'             found = false

'             for each item in baseArray
'                 'append the child array to the result when we found the right spot
'                 if not found and item.id > firstChildId
'                     found = true
'                     for each child in childArray
'                         result.push(child)
'                     end for
'                 end if
'                 result.push(item)
'             end for
'             if found = false
'                 for each child in childArray
'                     result.push(child)
'                 end for
'             end if
'         end for
'     end function, baseArray, childArrayEnd)

'     runTest("manual build at end (array append)", function(opCount, baseArray, childArray)
'         for op = 0 to opCount
'             result = []
'             firstChildId = childArray[0].id
'             found = false

'             for each item in baseArray
'                 'append the child array to the result when we found the right spot
'                 if not found and item.id > firstChildId
'                     found = true
'                     result.append(childArray)
'                 end if
'                 result.push(item)
'             end for
'             if found = false
'                 result.append(childArray)
'             end if
'         end for
'     end function, baseArray, childArrayEnd)
' end sub

' sub stringConcatGrouping()
'     runTest("literal assignment", function(opCount)
'         local = "string"
'         for i = 0 to opCount
'             local = "string"
'         end for
'     end function)

'     runTest("literal assignment", function(opCount)
'         local = "string"
'         for i = 0 to opCount
'             local = ("string")
'         end for
'     end function)
' end sub

' sub literalVsSingleAALookup()
'     runTest("literal assignment", function(opCount)
'         obj = {}
'         for i = 0 to opCount
'             obj.prop = "#FFFFFF"
'         end for
'     end function)

'     runTest("small aa dotted get assignment", function(opCount, dictionary)
'         obj = {}
'         for i = 0 to opCount
'             obj.prop = dictionary.zzProp
'         end for
'     end function, {
'         zzProp: "#FFFFFF"
'     })

'     dictionary = {}
'     for i = 0 to 10000
'         dictionary["prop" + str(i)] = "#FFFFFF"
'     end for
'     dictionary.zzProp = "#FFFFFF"

'     runTest("large aa dotted get assignment", function(opCount, dictionary)
'         obj = {}
'         for i = 0 to opCount
'             obj.prop = dictionary.zzProp
'         end for
'     end function, dictionary)

'     runTest("small aa indexed get assignment", function(opCount, dictionary)
'         obj = {}
'         for i = 0 to opCount
'             obj.prop = dictionary["zzProp"]
'         end for
'     end function, {
'         zzProp: "#FFFFFF"
'     })

'     dictionary = {}
'     for i = 0 to 10000
'         dictionary["prop" + str(i)] = "#FFFFFF"
'     end for
'     dictionary.zzProp = "#FFFFFF"

'     runTest("large aa dotted get assignment", function(opCount, dictionary)
'         obj = {}
'         for i = 0 to opCount
'             obj.prop = dictionary["zzProp"]
'         end for
'     end function, dictionary)
' end sub

' sub typePerfWithGetInterface()
'     runTest("getInterface integer", function(opCount)
'         value = 0
'         for i = 0 to opCount
'             result = getinterface(value, "ifInt") <> invalid
'         end for
'     end function)

'     runTest("getInterface roInt", function(opCount)
'         value = createObject("roInt")
'         for i = 0 to opCount
'             result = getinterface(value, "ifInt") <> invalid
'         end for
'     end function)

'     runTest("type integer", function(opCount)
'         value = 0
'         for i = 0 to opCount
'             valueType = type(value)
'             result = valueType = "Integer" or valueType = "roInt"
'         end for
'     end function)

'     runTest("type roInt", function(opCount)
'         value = createObject("roInt")
'         for i = 0 to opCount
'             valueType = type(value)
'             result = valueType = "Integer" or valueType = "roInt"
'         end for
'     end function)
' end sub

' sub intTypeCheck()
'     runTest("type call each time - equality", function(opCount)
'         text = m.longText
'         for i = 0 to opCount
'             result = type(text) = "Integer" or type(text) = "roInt"
'         end for
'     end function)

'     runTest("lifted type call - equality", function(opCount)
'         text = m.longText
'         for i = 0 to opCount
'             valueType = type(text)
'             result = valueType = "Integer" or valueType = "roInt"
'         end for
'     end function)

'     runTest("type call each time - instr", function(opCount)
'         text = m.longText
'         for i = 0 to opCount
'             result = instr(1, type(text), "Integer") or type(text) = "roInt"
'         end for
'     end function)

'     runTest("lifted type call - instr", function(opCount)
'         text = m.longText
'         for i = 0 to opCount
'             valueType = type(text)
'             result = instr(1, valueType, "Integer") or valueType = "roInt"
'         end for
'     end function)
' end sub

' ' Test various ways of running `type` to see which is fastest
' sub typePerf()
'     runTest("duplicate type checks", function(opCount)
'         value = m.longText
'         for i = 0 to opCount
'             result = type(value) = "Integer" or type(value) = "roInt" or type(value) = "LongInteger" or type(value) = "roInteger" or type(value) = "Float" or type(value) = "roFloat" or type(value) = "Double" or type(value) = "roDouble" or type(value) = "roIntrinsicDouble"
'         end for
'     end function)

'     runTest("liftedType", function(opCount)
'         value = m.longText
'         for i = 0 to opCount
'             valueType = type(value)
'             result = valueType = "Integer" or valueType = "roInt" or valueType = "LongInteger" or valueType = "roInteger" or valueType = "Float" or valueType = "roFloat" or valueType = "Double" or valueType = "roDouble" or valueType = "roIntrinsicDouble"
'         end for
'     end function)

'     runTest("liftedType instr", function(opCount)
'         value = m.longText
'         for i = 0 to opCount
'             valueType = type(value)
'             result = instr(1, valueType, "Int") <> 0 or instr(1, valueType, "Float") <> 0 or instr(1, valueType, "Double") <> 0
'         end for
'     end function)

'     runTest("helper", function(opCount)
'         value = m.longText
'         for i = 0 to opCount
'             result = bslib_isNumber(type(value))
'         end for
'     end function)

'     runTest("inline m assignment", function(opCount)
'         value = m.longText
'         for i = 0 to opCount
'             result = (function(valueType)
'                 m.valueType = valueType
'                 return true
'             end function)(type(value)) and (m.valueType = "Integer" or m.valueType = "roInt" or m.valueType = "LongInteger" or m.valueType = "roInteger" or m.valueType = "Float" or m.valueType = "roFloat" or m.valueType = "Double" or m.valueType = "roDouble" or m.valueType = "roIntrinsicDouble")
'         end for
'     end function)
' end sub

' function bslib_isNumber(valueType as dynamic)
'     return valueType = "Integer" or valueType = "roInt" or valueType = "LongInteger" or valueType = "roInteger" or valueType = "Float" or valueType = "roFloat" or valueType = "Double" or valueType = "roDouble" or valueType = "roIntrinsicDouble"
' end function

' function bslib_isBoolean(valType as dynamic)
'     return valType = "Boolean" or valType = "roBoolean"
' end function

' sub stringVsArrayKeyLookups()
'     json = {
'         user: {
'             favorites: [
'                 {
'                     isActive: true
'                 }
'             ]
'         }
'     }
'     runTest("string split", sub(opCount, json, path)
'         getPath = function(content as object, path as string, default = invalid as dynamic, disableIndexing = false as boolean) as dynamic
'             part = invalid

'             if path <> invalid
'                 parts = path.split(".")
'                 numParts = parts.count()
'                 i = 0

'                 part = content
'                 while i < numParts and part <> invalid
'                     if not disableIndexing and (parts[i] = "0" or (parts[i].toInt() <> 0 and parts[i].toInt().toStr() = parts[i]))
'                         if type(part) <> "<uninitialized>" and part <> invalid and GetInterface(part, "ifArray") <> invalid
'                             part = part[parts[i].toInt()]
'                         else if type(part) <> "<uninitialized>" and part <> invalid and GetInterface(part, "ifAssociativeArray") <> invalid
'                             part = part[parts[i]]
'                         else if type(part) = "roSGNode"
'                             part = part.getChild(parts[i].toInt())
'                         else
'                             part = invalid
'                         end if
'                     else
'                         if type(part) <> "<uninitialized>" and part <> invalid and GetInterface(part, "ifAssociativeArray") <> invalid
'                             part = part[parts[i]]
'                         else
'                             part = invalid
'                         end if
'                     end if
'                     i++
'                 end while
'             end if

'             if part <> invalid
'                 return part
'             else
'                 return default
'             end if
'         end function

'         for i = 0 to opCount
'             getPath(json, path)
'         end for
'     end sub, json, "user.favorites.0.isActive")

'     runTest("already split", sub(opCount, json, keys)
'         getPath = function(content as object, parts, default = invalid as dynamic, disableIndexing = false as boolean) as dynamic
'             part = invalid

'             if parts <> invalid
'                 numParts = parts.count()
'                 i = 0

'                 part = content
'                 while i < numParts and part <> invalid
'                     if not disableIndexing and (parts[i] = "0" or (parts[i].toInt() <> 0 and parts[i].toInt().toStr() = parts[i]))
'                         if type(part) <> "<uninitialized>" and part <> invalid and GetInterface(part, "ifArray") <> invalid
'                             part = part[parts[i].toInt()]
'                         else if type(part) <> "<uninitialized>" and part <> invalid and GetInterface(part, "ifAssociativeArray") <> invalid
'                             part = part[parts[i]]
'                         else if type(part) = "roSGNode"
'                             part = part.getChild(parts[i].toInt())
'                         else
'                             part = invalid
'                         end if
'                     else
'                         if type(part) <> "<uninitialized>" and part <> invalid and GetInterface(part, "ifAssociativeArray") <> invalid
'                             part = part[parts[i]]
'                         else
'                             part = invalid
'                         end if
'                     end if
'                     i++
'                 end while
'             end if

'             if part <> invalid
'                 return part
'             else
'                 return default
'             end if
'         end function
'         for i = 0 to opCount
'             getPath(json, keys)
'         end for
'     end sub, json, ["user", "favorites", "0", "isActive"])
' end sub

' sub noop()
' end sub

' sub noop1(p1 as dynamic)
' end sub

' sub noop2(p1 as dynamic, p2 as dynamic)
' end sub
