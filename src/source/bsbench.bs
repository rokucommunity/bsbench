namespace bsbench

    'This array is auto-generated during the build process
    const allSuites = [] as BenchmarkSuite[]

    function runSync(options as RunOptions)
        suites = allSuites
        for each suite in suites
            runSuite(suite, options)
        end for
    end function

    function runAsync()
    end function

    function runSuite(suite as BenchmarkSuite, options as RunOptions)
        'print a ascii table style fenced header for the suite
        print `********************************************************************`
        print `           ${suite.name} `
        print `********************************************************************`

        suiteResults = [] as BenchmarkResult[]
        for each test in suite.tests
            print `‌‌ `
            testFunction = test.func

            print `${test.name} (Warming up)`
            'find the number of iterations we can fit into 500ms
            iterationsForDuration = bsbench.getIterationsForDuration(testFunction, 500, suite.variant)
            samples = 5

            results = [] as BenchmarkResult[]
            print `${test.name} (Running ${numberToString(iterationsForDuration)} iterations)`
            for i = 0 to samples - 1
                result = testFunction(iterationsForDuration, suite.variant) as BenchmarkResult
                result.operationsPerSecond = bsbench.getOperationsPerSecond(result.startTime, result.endTime, result.iterations)
                results.push(result)
                print `${test.name} (sample ${i + 1} of ${samples})`
                bsbench.reportStatus(suite.name, test.name, i, result.iterations, result.startTime, result.endTime)
            end for
            opsPerSec = average(results, "operationsPerSecond")
            print `${test.name} (Done: ${numberToString(result.operationsPerSecond)} ops/sec)`
            suiteResults.push(result)
        end for

        printSuiteResults(suiteResults)
    end function

    '
    ' Run the test function with increasing iterations until we find an iteration count that runs for approximately `targetDurationMs`
    '
    function getIterationsForDuration(testFunction as function, targetDurationMs as integer, variant as roAssociativeArray, marginOfErrorMs = 3) as integer


        'do a timed run and return some stats
        timedRun = function(testFunction as function, iterations as dynamic, variant as roAssociativeArray, targetDurationMs as integer) as TimedRunResult
            'force iterations to be an integer, and ensure there's at least 1 iteration
            iterations = max(Cint(iterations), 1)
            testResult = testFunction(iterations, variant)
            elapsedMs = bsbench.getMilliseconds(testResult.endTime) - bsbench.getMilliseconds(testResult.startTime)

            if elapsedMs = 0
                return {
                    elapsedMs: 0,
                    iterations: iterations,
                    iterationsPerMillisecond: 0
                    iterationsForTargetDuration: 0
                }
            end if

            iterationsPerMillisecond = iterations / elapsedMs
            iterationsForTargetDuration = iterationsPerMillisecond * targetDurationMs
            return {
                elapsedMs: elapsedMs,
                iterations: iterations,
                iterationsPerMillisecond: iterationsPerMillisecond
                iterationsForTargetDuration: iterationsForTargetDuration
            }
        end function

        runResult as TimedRunResult = invalid
        iterations = 1

        startTime = createObject("roDateTime")
        'grow the iterations exponentially until we find a nonzero runtime greater than 50ms
        while true
            runResult = timedRun(testFunction, iterations, variant, targetDurationMs)

            'we found a set of iterations that ran for a good minimum time
            if runResult.elapsedMs > 50
                exit while
            else
                'double the iterations and try again
                iterations *= 3
            end if
        end while

        endTime = createObject("roDateTime")
        elapsedMs = bsbench.getMilliseconds(endTime) - bsbench.getMilliseconds(startTime)
        ' print `found a nonzero runtime greater than 50ms, and took ${elapsedMs}ms to find it`

        'run for a portion the computed iterations to get a better understanding of the time it takes to run
        runResult = timedRun(testFunction, runResult.iterationsForTargetDuration * 0.50, variant, targetDurationMs)
        ' print "50% of the computed iterations", runResult

        'now run the exact computed iterations
        runResult = timedRun(testFunction, runResult.iterationsForTargetDuration, variant, targetDurationMs)
        ' print "exact computed iterations", runResult

        lastRunResult = invalid as TimedRunResult
        tries = 0
        'compensate for overshoot/undershoot
        while runResult.elapsedMs < (targetDurationMs - marginOfErrorMs) or runResult.elapsedMs > (targetDurationMs + marginOfErrorMs) and tries < 5
            tries++
            'calculate how much we under/overshot
            extraMs = targetDurationMs - runResult.elapsedMs
            'the number of iterations we needed in this run to have reached our target
            extraIterations = extraMs * runResult.iterationsPerMillisecond
            newTotalIterations = runResult.iterations + extraIterations

            lastRunResult = runResult
            runResult = timedRun(testFunction, newTotalIterations, variant, targetDurationMs)

            ' print `overshoot/undershoot compensation #${tries} (add ${extraIterations} iterations)`, runResult
        end while

        runs = [runResult]
        if lastRunResult <> invalid
            runs.push(lastRunResult)
            runs.push({
                elapsedMs: average([runResult.elapsedMs, lastRunResult.elapsedMs]),
                iterations: average([runResult.iterationsForTargetDuration, lastRunResult.iterationsForTargetDuration]),
                iterationsPerMillisecond: 0
                iterationsForTargetDuration: 0
            })
        end if

        bestValue = getClosestTestRun(runs, targetDurationMs)

        ' print "best value", bestValue

        ' print "keeping the best iterations value from our various results"

        return bestValue.iterations
    end function

    function average(values as dynamic[], key = invalid) as dynamic
        sum = 0
        for each value in values
            if key <> invalid
                sum += value[key]
            else
                sum += value
            end if
        end for
        return sum / values.Count()
    end function

    '
    ' Find the closest number in an array to a target number
    function getClosestTestRun(items as TimedRunResult[], target as integer)
        result = items[0]
        for each item in items
            'skip invalid values
            if item = invalid
                continue for
            end if
            if abs(item.elapsedMs - target) < abs(result.elapsedMs - target)
                result = item
            end if
        end for
        return result
    end function

    function printSuiteResults(suiteResults as BenchmarkResult[], sort = false)
        'sort the results by operations per second (descending)
        if sort then
            suiteResults.sortBy("operationsPerSecond", "r")
        end if

        'print a few blank-ish lines to separate the results
        print `‌‌ \n‌‌ `
        print `${suiteResults[0].suiteName} -- RESULTS:`
        print padRight("", 50, "_")
        highestOpsPerSec = suiteResults[0].operationsPerSecond
        lowestOpsPerSec = suiteResults[0].operationsPerSecond
        opsPerSecMaxLen = 0
        nameLengthMaxLen = 0
        for each suiteResult in suiteResults
            'calculate slowest
            if suiteResult.operationsPerSecond < lowestOpsPerSec
                lowestOpsPerSec = suiteResult.operationsPerSecond
            end if

            'calculate highest ops/sec
            if suiteResult.operationsPerSecond > highestOpsPerSec
                highestOpsPerSec = suiteResult.operationsPerSecond
            end if

            'calculate logest ops/sec string
            opsPerSecTextLength = numberToString(suiteResult.operationsPerSecond).Len()
            if opsPerSecTextLength > opsPerSecMaxLen
                opsPerSecMaxLen = opsPerSecTextLength
            end if

            'calculate longest name
            if suiteResult.name.Len() > nameLengthMaxLen
                nameLengthMaxLen = suiteResult.name.Len()
            end if
        end for

        for each suiteResult in suiteResults
            postfix = ""
            if suiteResult.operationsPerSecond = highestOpsPerSec then
                postfix = " (fastest)"
            end if
            if suiteResult.operationsPerSecond = lowestOpsPerSec then
                postfix = " (slowest)"
            end if
            print padRight(suiteResult.name + ": ", nameLengthMaxLen + 5, "-"); " "; padLeft(numberToString(suiteResult.operationsPerSecond), opsPerSecMaxLen, " "); " ops/sec"; postfix
        end for
        'print a few blank-ish lines to separate the results
        print `‌‌ \n‌‌ `
    end function

    function padRight(value as string, padLength = 2 as integer, paddingCharacter = "0" as dynamic) as string
        while value.len() < padLength
            value += paddingCharacter
        end while
        return value
    end function

    function padLeft(value as string, padLength = 2 as integer, paddingCharacter = "0" as dynamic) as string
        while value.len() < padLength
            value = paddingCharacter + value
        end while
        return value
    end function

    '
    ' Convert a number into a string with commas every 3 digits
    '
    function numberToString(num)
        result = ""
        i = 0
        while num > 1
            loopNum = (num mod 10).ToStr().Trim()
            result = loopNum + result
            num = num / 10
            i++
            if i mod 3 = 0 and num > 1 then
                result = "," + result
            end if
        end while
        result = result + "." + ((num * 10) mod 1).ToStr().Trim() + ((num * 100) mod 1).ToStr().Trim()
        return result
    end function

    function getOperationsPerSecond(startDate, endDate, ops)
        startMs = getMilliseconds(startDate)
        endMs = getMilliseconds(endDate)
        seconds = (endMs - startMs) / 1000
        if seconds = 0 then
            seconds = 0.0000001
        end if
        opsPerSec = ops / seconds
        return opsPerSec
    end function

    function getMilliseconds(date) as integer
        result = 0
        result += date.GetMinutes() * 60 * 1000
        result += date.GetSeconds() * 1000
        result += date.GetMilliseconds()
        return result
    end function

    function getEpoch(date as roDateTime) as longinteger
        result = 0
        result += date.AsSeconds()
        result += date.GetMilliseconds()
        return result
    end function

    function reportStatus(suiteName as string, testName as string, sampleNumber as integer, iterations as integer, startTime as roDateTime, endTime as roDateTime)
        #if PRINT_STATUS
            print "bsbenchStatus: " FormatJson({
                suiteName: suiteName,
                testName: testName,
                sampleNumber: sampleNumber,
                iterations: iterations,
                startTime: bsbench.getEpoch(startTime),
                endTime: bsbench.getEpoch(endTime)
            })
        #end if
    end function

    function max(a as integer, b as integer) as integer
        if a > b
            return a
        end if
        return b
    end function

end namespace

interface BenchmarkSuite
    name as string
    tests as BenchmarkTest[]
    variant as roAssociativeArray
end interface

interface BenchmarkTest
    name as string
    func as function
end interface

interface RunOptions
end interface

interface BenchmarkResult
    startTime as roDateTime
    endTime as roDateTime
    iterations as integer
    operationsPerSecond as double
    name as string
    suiteName as string
end interface

interface TimedRunResult
    elapsedMs as integer
    iterations as integer
    iterationsPerMillisecond as double
    iterationsForTargetDuration as integer
end interface
